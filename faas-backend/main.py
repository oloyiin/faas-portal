# main.py â€” API FastAPI pour la gestion de fonctions FaaS via Knative et kn-func

import os
import logging
import tempfile
import shutil
import asyncio
import aiofiles

from pathlib import Path
from typing import List, Optional

from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Body
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import requests
import urllib3
from dotenv import load_dotenv

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# CONFIGURATION GÃ‰NÃ‰RALE
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

# Charge les variables d'environnement depuis le fichier .env
load_dotenv()

# DÃ©sactive les warnings liÃ©s aux certificats auto-signÃ©s
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Active le logging pour les erreurs, infos, etc.
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# DÃ©finition des chemins de base
BASE_DIR = Path(__file__).parent
CERTS_DIR = BASE_DIR / "certs"

# Chargement des certificats pour appel API Kubernetes
CERT = (str(CERTS_DIR / "client.crt"), str(CERTS_DIR / "client.key"))
CACERT = str(CERTS_DIR / "cert.crt")

# Adresse de l'API Kubernetes
API_SERVER = os.getenv("API_SERVER", "https://134.214.202.225:16443")

# Headers standards pour les appels REST
HEADERS = {"Content-Type": "application/json"}

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# VÃ‰RIFICATION DES CERTIFICATS
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

def verify_certificates():
    """
    VÃ©rifie que tous les certificats nÃ©cessaires sont prÃ©sents dans le dossier certs/.
    """
    required = ["client.crt", "client.key", "cert.crt"]
    missing = [str(CERTS_DIR / c) for c in required if not (CERTS_DIR / c).exists()]
    if missing:
        raise FileNotFoundError(f"Certificats manquants : {missing}")

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# AJOUT AUTOMATIQUE AU FICHIER /etc/hosts
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
"""

def add_to_etc_hosts(service_name: str, ip_address: str = "127.0.0.1"):

    ##Ajoute une ligne Ã  /etc/hosts pour rendre la fonction accessible via <nom>.example.com
    
    #hosts_path = "/etc/hosts"
    #entry = f"{ip_address} {service_name}.example.com"
    try:
        # VÃ©rifie si l'entrÃ©e existe dÃ©jÃ 
        with open(hosts_path, 'r') as f:
            lines = f.readlines()
            if any(service_name in line for line in lines):
                logger.info(f"{service_name} dÃ©jÃ  prÃ©sent dans /etc/hosts")
                return
        # Ajoute l'entrÃ©e si elle nâ€™existe pas
        with open(hosts_path, 'a') as f:
            f.write(entry)
        logger.info(f"AjoutÃ© Ã  /etc/hosts : {entry.strip()}")
    except PermissionError:
        logger.error("X Permission refusÃ©e pour modifier /etc/hosts (lancer avec sudo)")
    except Exception as e:
        logger.error(f"Erreur Ã©criture /etc/hosts : {e}")

        """ 

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# FASTAPI INITIALISATION
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

app = FastAPI()

# Autorisation CORS (ici ouvert Ã  tous pour dÃ©veloppement)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    """
    VÃ©rification des certificats au lancement de lâ€™API.
    """
    try:
        verify_certificates()
    except FileNotFoundError as e:
        logger.error(f"Erreur de certificat : {e}")

@app.get("/")
def root():
    """Route de test pour voir si l'API tourne."""
    return {"message": "Bienvenue sur l'API FaaS ðŸš€"}

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# MODÃˆLES Pydantic
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

class Fonction(BaseModel):
    nom: str
    langage: str
    version: str
    commande: Optional[List[str]] = []
    dependances: Optional[List[str]] = []

class CreationFonction(BaseModel):
    nom: str
    langage: str

class DeploiementFonction(BaseModel):
    nom: str
    image_registry: Optional[str] = "localhost:32000"
    builder: Optional[str] = "s2i"

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# OUTILS GÃ‰NÃ‰RIQUES
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

async def execute_command(command: List[str], cwd: Optional[str] = None) -> dict:
    """
    ExÃ©cute une commande shell de maniÃ¨re asynchrone.
    """
    try:
        proc = await asyncio.create_subprocess_exec(
            *command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd=cwd
        )
        stdout, stderr = await proc.communicate()
        return {
            "success": proc.returncode == 0,
            "stdout": stdout.decode(),
            "stderr": stderr.decode()
        }
    except Exception as e:
        return {"success": False, "stdout": "", "stderr": str(e)}

async def save_uploaded_file(upload_file: UploadFile, destination: Path) -> bool:
    """
    Sauvegarde un fichier envoyÃ© par l'utilisateur via FastAPI.
    """
    try:
        async with aiofiles.open(destination, 'wb') as f:
            await f.write(await upload_file.read())
        return True
    except Exception as e:
        logger.error(f"Erreur fichier : {e}")
        return False

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ENDPOINTS KUBERNETES KNATIVE
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

@app.get("/fonctions")
def get_fonctions():
    """
    RÃ©cupÃ¨re la liste des services Knative dÃ©ployÃ©s dans le namespace 'default'.
    """
    try:
        r = requests.get(f"{API_SERVER}/apis/serving.knative.dev/v1/namespaces/default/services",
                         cert=CERT, verify=CACERT, headers=HEADERS, timeout=30)
        r.raise_for_status()
        return [item["metadata"]["name"] for item in r.json().get("items", [])]
    except Exception as e:
        raise HTTPException(status_code=503, detail=str(e))

@app.get("/fonctions/{nom}")
def get_fonction(nom: str):
    """
    RÃ©cupÃ¨re les dÃ©tails dâ€™une fonction (nom + URL publique).
    """
    try:
        r = requests.get(f"{API_SERVER}/apis/serving.knative.dev/v1/namespaces/default/services/{nom}",
                         cert=CERT, verify=CACERT, headers=HEADERS, timeout=30)
        if r.status_code == 404:
            return {"message": "Fonction non trouvÃ©e"}
        return {"nom": nom, "url": r.json()["status"].get("url")}
    except Exception as e:
        raise HTTPException(status_code=503, detail=str(e))

@app.get("/fonctions/{nom}/etat")
def get_etat_fonction(nom: str):
    """
    VÃ©rifie si la fonction est prÃªte Ã  recevoir du trafic (Ready=True).
    """
    try:
        r = requests.get(f"{API_SERVER}/apis/serving.knative.dev/v1/namespaces/default/services/{nom}",
                         cert=CERT, verify=CACERT, headers=HEADERS, timeout=30)
        conditions = r.json().get("status", {}).get("conditions", [])
        for cond in conditions:
            if cond.get("type") == "Ready":
                return {"etat": cond.get("status")}
        return {"etat": "Inconnu"}
    except Exception as e:
        raise HTTPException(status_code=503, detail=str(e))

@app.delete("/fonctions/{nom}")
def delete_fonction(nom: str):
    """
    Supprime un service Knative.
    """
    try:
        r = requests.delete(f"{API_SERVER}/apis/serving.knative.dev/v1/namespaces/default/services/{nom}",
                            cert=CERT, verify=CACERT, headers=HEADERS, timeout=30)
        if r.status_code == 404:
            return {"message": "Fonction non trouvÃ©e"}
        return {"message": f"Fonction '{nom}' supprimÃ©e"}
    except Exception as e:
        raise HTTPException(status_code=503, detail=str(e))

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ENDPOINTS LOCAUX AVEC kn-func (crÃ©ation/dÃ©ploiement)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

@app.post("/fonctions/creer")
async def creer_fonction(nom: str = Form(...), langage: str = Form(...)):
    """
    CrÃ©e une fonction Knative via kn-func, puis ajoute l'entrÃ©e Ã  /etc/hosts.
    """
    try:
        command = ["microk8s", "kn-func", "create", nom, "-l", langage]
        result = await execute_command(command)
        if not result["success"]:
            raise HTTPException(status_code=500, detail=result["stderr"])
        #add_to_etc_hosts(nom)
        return {"message": f"Fonction '{nom}' crÃ©Ã©e", "stdout": result["stdout"]}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/fonctions/{nom}/deployer")
async def deployer_fonction(nom: str, fichier: UploadFile = File(...),
                            image_registry: str = Form("localhost:32000"),
                            builder: str = Form("s2i")):
    """
    DÃ©ploie une fonction en copiant un fichier source puis en lanÃ§ant `kn-func deploy`.
    """
    temp_dir = tempfile.mkdtemp()
    try:
        function_dir = Path(nom)
        if not function_dir.exists():
            raise HTTPException(status_code=404, detail="Fonction inexistante")
        temp_file_path = Path(temp_dir) / fichier.filename
        await save_uploaded_file(fichier, temp_file_path)
        shutil.copy2(temp_file_path, function_dir / fichier.filename)
        command = ["microk8s", "kn-func", "deploy",
                   "--image", f"{image_registry}/{nom}:latest",
                   "--builder", builder]
        result = await execute_command(command, cwd=str(function_dir))
        if not result["success"]:
            raise HTTPException(status_code=500, detail=result["stderr"])
        return {"message": f"Fonction '{nom}' dÃ©ployÃ©e", "stdout": result["stdout"]}
    finally:
        shutil.rmtree(temp_dir, ignore_errors=True)

@app.post("/fonctions/creer-et-deployer")
async def creer_et_deployer(nom: str = Form(...), langage: str = Form(...),
                             fichier: UploadFile = File(...),
                             image_registry: str = Form("localhost:32000"),
                             builder: str = Form("s2i")):
    """
    CrÃ©e une fonction, copie le code, puis la dÃ©ploie.
    """
    await creer_fonction(nom, langage)
    return await deployer_fonction(nom, fichier, image_registry, builder)

@app.get("/fonctions/{nom}/logs")
async def get_logs_fonction(nom: str, lines: int = 100):
    """
    RÃ©cupÃ¨re les logs (stdout) de la derniÃ¨re exÃ©cution de la fonction.
    """
    command = ["microk8s", "kubectl", "logs", "-l", f"serving.knative.dev/service={nom}", "--tail", str(lines)]
    result = await execute_command(command)
    if not result["success"]:
        raise HTTPException(status_code=500, detail=result["stderr"])
    return {"logs": result["stdout"]}

# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# POINT Dâ€™ENTRÃ‰E LOCAL
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
