# backend-deploy 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  labels:
    app: backend-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
    spec:
      containers:
      - name: backend-api
        image: localhost/faas-backend:v1
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
        # Ajouter des variables d'environnement si n√©cessaire
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        # Ajouter des limites de ressources
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # Ajouter des health checks
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: backend-api-service
spec:
  type: NodePort
  selector:
    app: backend-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
      nodePort: 30081

#deployment.sh
#!/bin/bash

IMAGE_NAME="localhost/faas-backend:v1"
TAR_FILE="backend.tar"
DEPLOYMENT_YAML="backend-deploy.yaml"

echo "=== Nettoyage ==="
podman rmi $IMAGE_NAME --force 2>/dev/null || true
microk8s ctr image rm $IMAGE_NAME 2>/dev/null || true
[ -f "$TAR_FILE" ] && rm "$TAR_FILE"

echo "=== Build ==="
podman build -t $IMAGE_NAME . --no-cache

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur lors du build"
    exit 1
fi

echo "=== Export et Import ==="
podman save $IMAGE_NAME -o $TAR_FILE
microk8s ctr image import $TAR_FILE

echo "=== D√©ploiement ==="
if microk8s kubectl get deployment backend-api >/dev/null 2>&1; then
    echo "Red√©marrage du d√©ploiement existant..."
    microk8s kubectl rollout restart deployment backend-api
else
    echo "Cr√©ation du d√©ploiement..."
    microk8s kubectl apply -f $DEPLOYMENT_YAML
fi

echo "=== Attente du d√©ploiement ==="
microk8s kubectl rollout status deployment backend-api --timeout=300s

if [ $? -eq 0 ]; then
    echo "‚úÖ D√©ploiement r√©ussi!"
    
    # Attendre que le pod soit vraiment pr√™t
    echo "Attente que le pod soit pr√™t..."
    microk8s kubectl wait --for=condition=ready pod -l app=backend-api --timeout=60s
    
    echo "=== Test de l'API ==="
    sleep 5  # Petit d√©lai pour que l'API d√©marre
    if curl -s http://172.16.50.102:30081/ >/dev/null; then
        echo "üåê API accessible sur: http://172.16.50.102:30081/"
        echo "‚úÖ Test API r√©ussi!"
    else
        echo "‚ö†Ô∏è  API pas encore accessible, v√©rifiez les logs"
    fi
    
    echo "=== √âtat final ==="
    microk8s kubectl get pods -l app=backend-api
    
else
    echo "‚ùå √âchec du d√©ploiement"
    microk8s kubectl logs -l app=backend-api --tail=20
fi

# Nettoyage
rm -f $TAR_FILE
echo "Archive supprim√©e."


# dockerfile 
FROM python:3.10-slim

WORKDIR /app

# Installer les d√©pendances syst√®me n√©cessaires
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Installer Knative Func
RUN curl -L https://github.com/knative/func/releases/download/knative-v1.13.0/func_linux_amd64 \
    -o /usr/local/bin/func && \
    chmod +x /usr/local/bin/func

# Installer les d√©pendances Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copier le code de l'application
COPY . .

# Exposer le port
EXPOSE 8000

# Ajouter un healthcheck (optionnel mais recommand√©)
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

# Commande de d√©marrage
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

#requirements
anyio==4.9.0
click==8.2.1
h11==0.16.0
httptools==0.6.4
idna==3.10
python-dotenv==1.1.0
PyYAML==6.0.2
sniffio==1.3.1
typing_extensions==4.14.0
uvicorn==0.34.3
uvloop==0.21.0
watchfiles==1.0.5
websockets==15.0.1
fastapi
uvicorn[standard]
python-multipart
requests==2.31.0

# backend-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: faas-backend
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: faas-backend-role
  namespace: default
rules:
- apiGroups: ["serving.knative.dev"]
  resources: ["services"]
  verbs: ["get", "list", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: faas-backend-rolebinding
  namespace: default
subjects:
- kind: ServiceAccount
  name: faas-backend
  namespace: default
roleRef:
  kind: Role
  name: faas-backend-role
  apiGroup: rbac.authorization.k8s.io
